import{_ as l,W as i,X as a,$ as e}from"./framework-412d6363.js";const n={},r=e(`<h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> Javascript</h1><h2 id="变量类型" tabindex="-1"><a class="header-anchor" href="#变量类型" aria-hidden="true">#</a> 变量类型</h2><p>JS变量最基本的分类就是 <mark>值类型</mark> 和 <mark>引用类型</mark> ，两者有何区别呢，可以通过例子看出来。</p><h3 id="值类型" tabindex="-1"><a class="header-anchor" href="#值类型" aria-hidden="true">#</a> 值类型</h3><h4 id="undefined" tabindex="-1"><a class="header-anchor" href="#undefined" aria-hidden="true">#</a> undefined</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> Number</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> s <span class="token operator">=</span>  <span class="token string">&#39;abc&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> boolean</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token boolean">true</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="symbol" tabindex="-1"><a class="header-anchor" href="#symbol" aria-hidden="true">#</a> Symbol</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;s&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="引用类型" tabindex="-1"><a class="header-anchor" href="#引用类型" aria-hidden="true">#</a> 引用类型</h3><h4 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> Array</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="function" tabindex="-1"><a class="header-anchor" href="#function" aria-hidden="true">#</a> Function</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="null" tabindex="-1"><a class="header-anchor" href="#null" aria-hidden="true">#</a> Null</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>特殊引用类型指针指向空地址</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><h5 id="null和undefined的区别" tabindex="-1"><a class="header-anchor" href="#null和undefined的区别" aria-hidden="true">#</a> <code>null</code>和<code>undefined</code>的区别</h5><ul><li>undefined</li></ul><ol><li>此处应该有一个值但是还没有定义</li><li>typeof undefined = undefined</li><li>转为数值为NaN</li><li>例如变量被声明了但没有赋值，就等于<code>undefined</code>。函数没有返回值默认返回<code>undefined</code></li></ol><ul><li>null</li></ul><ol><li>表示“没有对象”，即该处不应该有值</li><li>typeof null=object</li><li>转为数值为0</li><li>作为函数的参数，表示该函数得参数 不是对象。作为对象原型链的终点</li></ol></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><h5 id="如何判断一个数据是nan" tabindex="-1"><a class="header-anchor" href="#如何判断一个数据是nan" aria-hidden="true">#</a> 如何判断一个数据是NaN</h5><ul><li>用<code>typeof</code>判断是否为<code>number</code>类型并且判断是否满足<code>isNaN</code></li><li>利用<code>NaN</code>是唯一一个不等于任何自身的特点n!==n</li><li><code>Object.is()</code> 方法用来判断两个值是否是相同的值。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="数组常用api" tabindex="-1"><a class="header-anchor" href="#数组常用api" aria-hidden="true">#</a> 数组常用api</h3><h4 id="循环" tabindex="-1"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h4><ul><li>for</li><li>for…in…</li><li>forEach</li><li>for…of</li><li>map</li><li>filter</li><li>some</li><li>every</li><li>reduce</li></ul><h4 id="直接修改原数组" tabindex="-1"><a class="header-anchor" href="#直接修改原数组" aria-hidden="true">#</a> 直接修改原数组</h4><ul><li>arr.push 在数组的尾部追加 1-n 个新元素</li><li>arr.pop 用于删除数组中的最后一个元素</li><li>arr.shift 用于删除并返回数组中的第一个元素，并将后面的元素向前移动一位，并且 length-1</li><li>arr.reverse 用于颠倒数组中的所有元素</li><li>arr.sort(callback) 对数组内的元素按照特定的规则进行排序； 参数：callback 用于排序规则的回调函数，默认按照第一个字符的 Uncode 编码进行排序；</li><li>arr.splice(start[ deleteCount [,val , ……])</li></ul><blockquote><ul><li>可以删除指定索引的数组元素；</li><li>可以用于数组的元素替换；</li><li>可以在指定的索引位置插入新的元素，并将之前的元素向后移动；</li><li>参数： start：开始索引；deleteCount ： 要删除的数量；val ： 要插入到 start 位置的元素；</li><li>返回值：返回的是被删除的数组片段，返回类型是数组；</li></ul></blockquote><ul><li>arr.unshift()</li></ul><blockquote><ul><li>用于在数组的头部有插入一条或多条数据，原数组向后移动；</li></ul></blockquote><h4 id="返回新数组" tabindex="-1"><a class="header-anchor" href="#返回新数组" aria-hidden="true">#</a> 返回新数组</h4><ul><li>arr.concat(value[, …… , valueN])</li></ul><blockquote><ul><li>用于将参数依次添加到数组尾部，并返回一个新数组；</li><li>参数：value 需要天骄到新数组的元素</li><li>返回值：添加元素后的新数组</li></ul></blockquote><ul><li>arr.join()</li></ul><blockquote><ul><li>用于将数组内所有元素进行 toString() 操作，并进行连接；</li><li>参数：用于拼接字符串额的连接符号；</li><li>返回值：新的字符串，包含了数组所有元素的 toString() 结果，默认以 ， 连接；</li></ul></blockquote><ul><li>arr.slice()</li></ul><blockquote><ul><li>截取数组指定索引的片段；</li><li>参数： start ：开始end：结束（可缺省，表示从 start 开始到数组结尾结束），也可以为负值；</li><li>返回值：截取到的数组片段；</li></ul></blockquote><h4 id="es6" tabindex="-1"><a class="header-anchor" href="#es6" aria-hidden="true">#</a> es6</h4><ul><li>arr.index(value[,start])</li></ul><blockquote><ul><li>用于检索数组中的 value 值，找到返回 index；否则，返回 -1；</li></ul></blockquote><ul><li>arr.forEach(callback)</li></ul><blockquote><ul><li>用于遍历数组，并将数组的每一个元素和索引值传入到回调函数中；</li></ul></blockquote><ul><li>arr.filter(callback)</li></ul><blockquote><ul><li>用于过滤数组</li><li>执行过程： 遍历数组；使用逻辑表达式进行检测；将所有的 true 的结果保存到一个新的数组中；返回新数组；</li></ul></blockquote><ul><li>arr.map(callback)</li></ul><blockquote><ul><li>用于遍历并操作数组元素；</li><li>返回值：新的数组；</li><li>执行过程： 遍历数组操作数组元素返回新数组</li></ul></blockquote><ul><li>arr.reduce(callback)</li></ul><blockquote><ul><li>在执行第一次回调函数的时候，会将数组的元素传入到 pre ，将数组的第二个元素传入到 next，之后每一次执行 pre 都是上次的 return ，最后一次执行的结果是整个 reduce 的返回值；</li><li>参数： pre : 上一个next ：下一个</li></ul></blockquote><ul><li>arr.every(callback)</li></ul><blockquote><ul><li>使用一个逻辑表达式，检测数组中的每个元素，全部为 true 则为 true ，否则为 false；</li></ul></blockquote><ul><li>arr.some(callback)</li></ul><blockquote><ul><li>使用一个逻辑表达式，检测数组中的每个元素，全部为 false 则为 false ，全部为 true 则为 true；</li></ul></blockquote><pre><code>- 对象常用api

	- Object.assign

		- 将多个对象合并到目标的属性合并到目标对象中，相同属性的值以最后一个合并对象的为准，返回目标对象，不改变被合并对象，可以实现浅克隆

	- Object.create

		- 初始化一个对象


	- Object.defineProperty

		- 参数

	- Object.getOwnPropertyNames

		- 查找目标对象的所有key值，并返回一个包含所有key值的数组


	- Object.keys

		- 查找目标对象的所有key值，并返回一个包含所有key值的数组


	- Object.getPrototypeOf

		- 该方法返回对象的原型对象，如果没有的话，则返回null


	- Object.is

		- 是确定两个值是否是相同的值,


	- Object.preventExtensions

		- 让一个对象永远不能添加新的属性，严格模式下会报错


	- Object.isExtensible

		- 判断一个对象是否可以修改属性,是放回true，反之返回false


	- Object.seal

		- 对一个对象进行密封，并返回被密封的对象，这些对象都是不能够添加属性，不能删除已有属性，以及不能够修改已有属性的可枚举型、可配置型、可写性

	- Object.isSealed

		- 判断一个对象是否被密封,是放回true，反之返回false


	- Object.freeze

		- 浅冻结一个对象，使其不能做任何修改，深层级的还是可以修改

		- 如果要实现深度冻结，可以通过递归来实现


	- Object.isFrozen

		- 判断一个对象是否被冻结,是放回true，反之返回false


	- Object.getOwnPropertySymbols

		- 返回一个对象中所有以Symbol类型为key的数组

	- Object.entries

		- 将对象中的所有key:value转为[key,value]格式，返回包含所有健值对的二维数组


	- Object.fromEntries

		- 把Object.entries转换后的二维数组重新转换为对象


	- Object.values

		- 返回一个对象的所有value值的数组集合
</code></pre><ul><li><p>typeof运算符</p><ul><li>识别所有的值类型</li><li>识别函数</li><li>判断是否是引用类型(object)</li></ul></li><li><p>深拷贝</p><ul><li>深拷贝代码-1</li><li>深拷贝代码-2</li></ul></li><li><p>类型转换</p><ul><li><p>=<mark>和</mark></p><ul><li><p>==</p><ul><li>唯一使用==</li></ul></li><li><p>===</p></li></ul></li><li><p>字符串拼接</p></li><li><p>if语句和逻辑运算</p><ul><li><p>if语句</p><ul><li>truly变量:!!a===true</li><li>falsely变量:!!a===false</li></ul></li><li><p>逻辑运算</p></li></ul></li></ul></li></ul><h3 id="原型和原型链" tabindex="-1"><a class="header-anchor" href="#原型和原型链" aria-hidden="true">#</a> 原型和原型链</h3><ul><li><p>class</p><ul><li><p>class的原型本质</p><ul><li>原型和原型链的图示</li><li>属性和方法的执行规则</li></ul></li><li><p>内容</p><ul><li>constructor</li><li>属性</li><li>方法</li></ul></li></ul></li><li><p>继承</p><ul><li>extends</li><li>super</li><li>扩展或重写方法</li></ul></li><li><p>原型</p><ul><li><p>原型图-1</p></li><li><p>每个class都有显式原型prototype</p></li><li><p>每个实例都有隐式原型__proto__</p></li><li><p>实例的__proto__指向对应class的prototype</p></li><li><p>基于原型的执行规则获取属性或执行方法时</p><ul><li>先在自身属性和方法查找</li><li>如果找不到则自动去__proto__中查找</li></ul></li></ul></li><li><p>原型链</p><ul><li>原型链图-1</li><li>验证一个属性是否是对象/实例本身的属性</li></ul></li><li><p>instanceof</p><ul><li><p>instanceof主要用于判断某个实例是否属于某个类型也可用于判断某个实例是否是其父类型或者祖先类型的实例</p></li><li><p>instanceof主要的实现原理</p><ul><li>只要右边变量的 prototype 在左边变量的原型链上即可。因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，如果查找失败，则会返回 false。</li></ul></li></ul></li><li><p>手写一个简易的jQuery，考虑插件和扩展性</p><ul><li>实现</li><li>调用const $p = new jQuery(‘p’)</li><li>插件</li><li>扩展性</li></ul></li><li><p>new操作符做了哪些事情</p><ul><li>new操作符新建了一个空对象</li><li>这个对象原型指向构造函数的prototype</li><li>执行构造函数后返回这个对象</li></ul></li></ul><h3 id="作用域和闭包" tabindex="-1"><a class="header-anchor" href="#作用域和闭包" aria-hidden="true">#</a> 作用域和闭包</h3><ul><li><p>作用域</p><ul><li>全局作用域</li><li>函数作用域</li><li>块级作用域（ES6）{}</li></ul></li><li><p>自由变量</p><ul><li>一个变量在当前作用域没有被定义，但是被使用了</li><li>向上级作用域一层一层依次寻找，直到找到为止</li><li>如果到全局作用域都没找到，则报错xx is not defined</li><li>自由变量的查找，是在函数定义的地方，向上级作用域查找，不是在执行的地方</li></ul></li><li><p>闭包</p><ul><li><p>函数作为参数被传递</p></li><li><p>函数作为返回值被返回</p></li><li><p>应用</p><ul><li>隐藏数据</li><li>闭包作用回调函数</li><li>函数节流，函数防抖</li></ul></li><li><p>闭包的优缺点</p></li><li><p>什么是闭包</p><ul><li>闭包是指有权访问另一个函数作用域中的变量的函数。其本质是函数的作用域链中保存着外部函数变量对象的引用。</li></ul></li></ul></li><li><p>this</p><ul><li><p>作为普通函数</p></li><li><p>使用call apply bind</p><ul><li><p>bind会返回一个新的函数去执行</p><ul><li><p>func.bind(thisObj, arg1, arg2 ...)</p><ul><li>手写bind函数</li></ul></li></ul></li><li><p>apply</p><ul><li><p>fn.apply(thisObj, [arg1, arg2 ...])</p><ul><li>手写apply函数</li></ul></li></ul></li><li><p>call</p><ul><li><p>fn.call(thisObj, arg1, arg2 ...)</p><ul><li>手写call函数</li></ul></li></ul></li></ul></li><li><p>作为对象方法被调用</p></li><li><p>在class方法中调用</p></li><li><p>箭头函数（永远取它上级作用域中this的值）</p></li><li><p>this在各个场景中取什么样的值，是在函数执行的时候确定的，而不是定义的时候</p></li></ul></li></ul><h3 id="异步" tabindex="-1"><a class="header-anchor" href="#异步" aria-hidden="true">#</a> 异步</h3><ul><li><p>单线程和异步</p><ul><li><p>单线程</p><ul><li>JS是单线程语言，只能同时做一件事</li><li>浏览器和nodejs已支持js启动进程，如Web Worker</li><li>JS和DOM渲染共用同一个进程，因为JS可修改DOM结构</li><li>遇到等待（网络请求、定时任务）不能卡住</li></ul></li><li><p>异步</p><ul><li><p>回调callback函数形式</p></li><li><p>异步不会阻塞代码执行</p></li><li><p>应用场景</p><ul><li><p>网络请求，如：ajax 图片加载</p><ul><li>ajax请求</li><li>图片加载</li></ul></li><li><p>定时任务，如：setTimeout</p></li></ul></li></ul></li><li><p>同步</p><ul><li>同步会阻塞代码执行</li></ul></li></ul></li><li><p>callback</p><ul><li>callback hell</li></ul></li><li><p>promise</p><ul><li></li><li><p>Promise解决callback hell的问题 ，支持多并发</p></li><li><p>promise加载一个图片</p><ul><li>先加载一个图片，再加载另一个图片</li></ul></li></ul></li></ul><h3 id="模块化" tabindex="-1"><a class="header-anchor" href="#模块化" aria-hidden="true">#</a> 模块化</h3><ul><li><p>ES6 Module</p><ul><li>Interface和type的区别</li><li>set和map</li></ul></li></ul><h2 id="js-web-api" tabindex="-1"><a class="header-anchor" href="#js-web-api" aria-hidden="true">#</a> JS-WEB-API</h2><h3 id="bom-browser-object-model" tabindex="-1"><a class="header-anchor" href="#bom-browser-object-model" aria-hidden="true">#</a> BOM（Browser Object Model）</h3><ul><li>navigator</li><li>screen</li><li>location</li><li>history</li></ul><h3 id="dom-document-object-model" tabindex="-1"><a class="header-anchor" href="#dom-document-object-model" aria-hidden="true">#</a> DOM document object model</h3><ul><li><p>树形结构</p></li><li><p>节点操作</p><ul><li>获取节点 querySelectorAll返回的是NodeList集合</li></ul></li><li><p>属性：引起DOM重新渲染 所以尽量使用property去操作</p><ul><li><p>property：以js对象的形式来修改属性， 在html结构中本来就存在</p><ul><li>nodeName和nodeType</li><li>property是DOM对象自身就拥有的属性</li></ul></li><li><p>attribute：修改html属性，会改变html结构</p></li><li><p>区别</p></li></ul></li><li><p>树结构操作</p><ul><li><p>新增/插入节点</p></li><li><p>获取子元素的列表，获取父元素</p><ul><li>子元素中过滤dom元素</li></ul></li><li><p>删除</p></li></ul></li><li><p>性能</p><ul><li>避免频繁的DOM操作</li><li>对DOM查询做缓存</li><li>将频繁操作改为一次性操作</li></ul></li></ul><h3 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h3><ul><li><p>绑定</p><ul><li><p>阻止默认行为</p></li><li><p>通用事件绑定函数</p><ul><li>调用</li></ul></li></ul></li><li><p>冒泡</p><ul><li><p>阻止冒泡</p></li><li><p>描述事件冒泡的流程</p><ul><li>基于DOM的树形结构</li><li>事件会顺着触发元素往上冒泡</li><li>应用场景：代理</li></ul></li></ul></li><li><p>代理：利用冒泡的机制，在瀑布流或者子元素数量庞大的情况下，事件可以绑定到父元素上</p><ul><li>优化版</li><li>代码简洁</li><li>减少浏览器内存占用</li></ul></li></ul><h3 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax" aria-hidden="true">#</a> ajax</h3><ul><li><p>XMLHttpRequest</p><ul><li>get</li><li>post</li></ul></li><li><p>状态码</p></li><li><p>跨域</p><ul><li><p>同源策略</p><ul><li><p>ajax请求时，浏览器要求当前网页和server必须同源（安全）</p></li><li><p>同源：协议、域名、端口，三者必须一致</p></li><li><p>加载图片、css、js可无视同源策略</p><ul><li>可用于统计打点，使用第三方统计服务</li><li>可使用CDN，CDN一般都是外域</li><li>可以实现JSONP</li></ul></li></ul></li><li><p>跨域解决方案</p><ul><li><p>JSONP</p><ul><li>可以绕过跨域限制</li><li>服务器可以任意动态拼接数据返回</li><li>所以， 就可以获得跨域的数据，只要服务端愿意返回</li></ul></li><li><p>CORS（服务端支持）</p></li></ul></li></ul></li><li><p>readyState</p></li><li><p>写一个简单的ajax</p></li><li><p>插件</p><ul><li>jquery</li></ul></li><li><p>ajax的五个步骤</p><ul><li>创建XMLHttpRequest对象</li><li>创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.</li><li>设置响应HTTP请求状态变化的函数.</li><li>发送HTTP请求.</li><li>获取异步调用返回的数据.</li></ul></li><li><p>get与post的区别</p></li></ul><h3 id="存储" tabindex="-1"><a class="header-anchor" href="#存储" aria-hidden="true">#</a> 存储</h3><ul><li><p>cookie</p><ul><li><p>本身用于浏览器和server通讯</p></li><li><p>最早是被借用来做本地存储</p></li><li><p>缺点</p><ul><li>存储大小：4KB</li><li>http请求时需要发送到服务端，增加请求数据量</li><li>只能用document.cookie=“a=100;”来修改</li></ul></li></ul></li><li><p>localStorage和session Storage</p><ul><li><p>HTML5专门为存储而设计，最大可存5M</p></li><li><p>API简单易用 setItem getItem</p></li><li><p>不会随着http请求被发送出去</p></li><li><p>区别</p><ul><li><p>localStorage</p><ul><li>数据永久存储，除非代码或者手动删除</li></ul></li><li><p>sessionStorage</p><ul><li>数据只存在于当前会话，浏览器关闭则清空</li></ul></li></ul></li></ul></li></ul><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><h2 id="开发环境" tabindex="-1"><a class="header-anchor" href="#开发环境" aria-hidden="true">#</a> 开发环境</h2><h3 id="git" tabindex="-1"><a class="header-anchor" href="#git" aria-hidden="true">#</a> git</h3><ul><li><p>最常用的代码版本管理工具</p></li><li><p>git服务端</p><ul><li>github</li><li>coding.net</li></ul></li><li><p>常用命令</p><ul><li>git rebase</li><li>git clone</li><li>git config</li><li>git fetch</li><li>git stash &amp; git stash pop</li></ul></li><li><p>.gitignore文件表示忽略文件提交，比如：node_modules</p></li></ul><h3 id="调试" tabindex="-1"><a class="header-anchor" href="#调试" aria-hidden="true">#</a> 调试</h3><h3 id="webpack和babel" tabindex="-1"><a class="header-anchor" href="#webpack和babel" aria-hidden="true">#</a> webpack和babel</h3><ul><li><p>webpack搭建环境</p><ul><li><p>npm init -y</p><ul><li>webpack.config.js</li></ul></li></ul></li><li><p>babel</p></li></ul><h3 id="linux命令" tabindex="-1"><a class="header-anchor" href="#linux命令" aria-hidden="true">#</a> linux命令</h3><h3 id="抓包" tabindex="-1"><a class="header-anchor" href="#抓包" aria-hidden="true">#</a> 抓包</h3><ul><li><p>移动端h5页，查看网络请求，需要抓包</p></li><li><p>抓包工具</p><ul><li>Windows fiddler</li><li>mac OS charles</li></ul></li><li><p>抓包过程</p><ul><li>手机和电脑连接同一个局域网</li><li>将手机代理到电脑上</li><li>手机浏览网，即可抓包</li><li>查看网络请求</li><li>网址代理</li><li>https</li></ul></li></ul><h2 id="运行环境" tabindex="-1"><a class="header-anchor" href="#运行环境" aria-hidden="true">#</a> 运行环境</h2><h3 id="页面加载" tabindex="-1"><a class="header-anchor" href="#页面加载" aria-hidden="true">#</a> 页面加载</h3><ul><li><p>加载</p><ul><li><p>加载资源的形式</p><ul><li>html代码</li><li>媒体文件</li><li>js css</li></ul></li><li><p>加载页面的过程</p><ul><li>DNS解析：域名-&gt;IP地址</li><li>浏览器根据IP地址向服务器发起http请求</li><li>服务器处理http请求，并返回给浏览器</li></ul></li></ul></li><li><p>渲染</p><ul><li>根据Html代码生成DOM Tree</li><li>根据CSS代码生成CSSOM</li><li>将DOM Tree 和CSSOM整合成一个Render Tree</li><li>浏览器根据RenderTree渲染页面</li><li>如果遇到 则暂停渲染，优先加载并执行js代码</li></ul></li></ul><h3 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化" aria-hidden="true">#</a> 性能优化</h3><ul><li><p>加载资源优化</p><ul><li><p>减少资源体积</p><ul><li><p>压缩资源体积</p><ul><li>比如：webpackproduction mode</li></ul></li></ul></li><li><p>减少访问次数</p><ul><li><p>合并代码</p><ul><li>比如：webpack bundle.js</li></ul></li><li><p>SSR服务器端渲染</p><ul><li>将网页和数据一起加载，一起渲染</li></ul></li><li><p>缓存</p><ul><li>静态资源加hash后缀，根据文件内容计算hash</li><li>文件内容不变，则hash不变，则url不变</li><li>url和文件不变，则会自动触发http缓存机制，返回304</li></ul></li></ul></li><li><p>使用更快的网络</p><ul><li>比如：CDN，根据地域做静态文件服务，因为不同区域网速不一样</li></ul></li></ul></li><li><p>渲染优化</p><ul><li><p>CSS放在head里面，js放在body最下面</p></li><li><p>今早开始执行js，用DOM Content Loaded触发</p></li><li><p>懒加载：图片懒加载，上滑加载更多</p></li><li><p>对DOM查询进行缓存</p></li><li><p>频繁DOM操作，合并到一起，插入DOM结构</p></li><li><p>节流throttle</p><ul><li><p>示例</p><ul><li>封装节流</li></ul></li></ul></li><li><p>防抖debounce</p><ul><li>封装防抖</li></ul></li></ul></li></ul><h3 id="安全" tabindex="-1"><a class="header-anchor" href="#安全" aria-hidden="true">#</a> 安全</h3><ul><li><p>xss跨站请求攻击</p><ul><li><p>预防（npm xss包）</p></li><li><p>漏洞</p><ul><li>以script标签形成注入</li><li>在内联的js中，拼接的数据突破了原本的限制</li><li>在标签的href、src等属性中，包含js等可执行代码</li><li>在onload、onerror、onclick等事件中，注入不受控制代码</li><li>在style属性和标签中，包含类似background-image：url（js代码）新版浏览器已经可以防范</li><li>在style属性和标签中，包含类似expression</li><li>包含引号添加属性</li></ul></li><li><p>攻击分类</p><ul><li><p>存储型</p><ul><li>攻击者将恶意代码提交到目标网站的数据库中</li></ul></li><li><p>反射型</p><ul><li>攻击者构造出特殊的url，其中包含恶意代码</li></ul></li><li><p>DOM型</p><ul><li><p>前端js自身的漏洞，攻击者构造出特殊的url，其中包含恶意代码</p><ul><li><p>预防</p><ul><li>innerHTML、outerHTML、document.write、textContent、set Attribute</li><li>v-html/dangerouslySetHTML</li><li>location、onclick、onerror、onload、onmouseover、a标签的href</li><li>js的eval、setTimeout、setInterval</li></ul></li></ul></li></ul></li><li><p>预防</p><ul><li>防止HTML中出现注入</li><li>防止javascript执行时，执行恶意代码</li><li>Content Security Policy</li><li>输入内容长度限制</li><li>HTTP-only cookie</li><li>验证码</li></ul></li></ul></li></ul></li><li><p>XSRF跨站请求伪造</p><ul><li>预防</li></ul></li><li><p>iframe</p></li><li><p>opener</p></li><li><p>clickJacking</p></li><li><p>HSTS</p></li><li><p>CND劫持</p></li></ul><h3 id="window-onload和domcontentloaded的区别" tabindex="-1"><a class="header-anchor" href="#window-onload和domcontentloaded的区别" aria-hidden="true">#</a> window.onload和DOMContentLoaded的区别</h3><h3 id="从输入url到渲染出页面的整个过程" tabindex="-1"><a class="header-anchor" href="#从输入url到渲染出页面的整个过程" aria-hidden="true">#</a> 从输入url到渲染出页面的整个过程</h3><h2 id="问题-1" tabindex="-1"><a class="header-anchor" href="#问题-1" aria-hidden="true">#</a> 问题</h2><h3 id="typeof能判断哪些类型" tabindex="-1"><a class="header-anchor" href="#typeof能判断哪些类型" aria-hidden="true">#</a> typeof能判断哪些类型</h3><h3 id="何时使用-何时使用" tabindex="-1"><a class="header-anchor" href="#何时使用-何时使用" aria-hidden="true">#</a> 何时使用=<mark>何时使用</mark></h3><h3 id="值类型和引用类型的区别" tabindex="-1"><a class="header-anchor" href="#值类型和引用类型的区别" aria-hidden="true">#</a> 值类型和引用类型的区别</h3><h3 id="如何准确判断一个变量是不是数组" tabindex="-1"><a class="header-anchor" href="#如何准确判断一个变量是不是数组" aria-hidden="true">#</a> 如何准确判断一个变量是不是数组</h3><h3 id="class的原型本质-怎么理解" tabindex="-1"><a class="header-anchor" href="#class的原型本质-怎么理解" aria-hidden="true">#</a> class的原型本质，怎么理解</h3><h3 id="this的不同应用场景-如何取值" tabindex="-1"><a class="header-anchor" href="#this的不同应用场景-如何取值" aria-hidden="true">#</a> this的不同应用场景，如何取值</h3><ul><li>1</li><li>2</li></ul><h3 id="实际开发中闭包的应用" tabindex="-1"><a class="header-anchor" href="#实际开发中闭包的应用" aria-hidden="true">#</a> 实际开发中闭包的应用</h3><h3 id="异步和同步的区别" tabindex="-1"><a class="header-anchor" href="#异步和同步的区别" aria-hidden="true">#</a> 异步和同步的区别</h3><h3 id="异步的应用场景" tabindex="-1"><a class="header-anchor" href="#异步的应用场景" aria-hidden="true">#</a> 异步的应用场景</h3><h3 id="dom是哪种数据结构" tabindex="-1"><a class="header-anchor" href="#dom是哪种数据结构" aria-hidden="true">#</a> DOM是哪种数据结构</h3><h3 id="dom操作常用的api" tabindex="-1"><a class="header-anchor" href="#dom操作常用的api" aria-hidden="true">#</a> DOM操作常用的api</h3><h3 id="property和attribute的区别" tabindex="-1"><a class="header-anchor" href="#property和attribute的区别" aria-hidden="true">#</a> property和attribute的区别</h3><h3 id="一次性插入节点-考虑性能" tabindex="-1"><a class="header-anchor" href="#一次性插入节点-考虑性能" aria-hidden="true">#</a> 一次性插入节点，考虑性能</h3><h3 id="如何识别浏览器的类型" tabindex="-1"><a class="header-anchor" href="#如何识别浏览器的类型" aria-hidden="true">#</a> 如何识别浏览器的类型</h3><h3 id="分析拆解url各个部分" tabindex="-1"><a class="header-anchor" href="#分析拆解url各个部分" aria-hidden="true">#</a> 分析拆解url各个部分</h3><h3 id="描述事件冒泡的流程" tabindex="-1"><a class="header-anchor" href="#描述事件冒泡的流程" aria-hidden="true">#</a> 描述事件冒泡的流程</h3><h3 id="无限下拉的列表如何监听每个图片的点击" tabindex="-1"><a class="header-anchor" href="#无限下拉的列表如何监听每个图片的点击" aria-hidden="true">#</a> 无限下拉的列表如何监听每个图片的点击</h3><h3 id="跨域的实现方式" tabindex="-1"><a class="header-anchor" href="#跨域的实现方式" aria-hidden="true">#</a> 跨域的实现方式</h3><h3 id="描述cookie-localstorage-sessionstorage的区别" tabindex="-1"><a class="header-anchor" href="#描述cookie-localstorage-sessionstorage的区别" aria-hidden="true">#</a> 描述cookie localStorage sessionStorage的区别</h3><h3 id="网页加载过程" tabindex="-1"><a class="header-anchor" href="#网页加载过程" aria-hidden="true">#</a> 网页加载过程</h3><h3 id="性能优化-1" tabindex="-1"><a class="header-anchor" href="#性能优化-1" aria-hidden="true">#</a> 性能优化</h3><h3 id="安全-1" tabindex="-1"><a class="header-anchor" href="#安全-1" aria-hidden="true">#</a> 安全</h3>`,120),s=[r];function t(p,u){return i(),a("div",null,s)}const o=l(n,[["render",t],["__file","index.html.vue"]]);export{o as default};
